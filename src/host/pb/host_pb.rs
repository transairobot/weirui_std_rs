// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/host/host_pb.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

///  Unified result wrapper for all host function responses
// @@protoc_insertion_point(message:HostResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HostResult {
    // message fields
    // @@protoc_insertion_point(field:HostResult.error_code)
    pub error_code: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:HostResult.error_message)
    pub error_message: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:HostResult.data)
    pub data: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:HostResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HostResult {
    fn default() -> &'a HostResult {
        <HostResult as ::protobuf::Message>::default_instance()
    }
}

impl HostResult {
    pub fn new() -> HostResult {
        ::std::default::Default::default()
    }

    // optional int32 error_code = 1;

    pub fn error_code(&self) -> i32 {
        self.error_code.unwrap_or(0)
    }

    pub fn clear_error_code(&mut self) {
        self.error_code = ::std::option::Option::None;
    }

    pub fn has_error_code(&self) -> bool {
        self.error_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_code(&mut self, v: i32) {
        self.error_code = ::std::option::Option::Some(v);
    }

    // optional string error_message = 2;

    pub fn error_message(&self) -> &str {
        match self.error_message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_error_message(&mut self) {
        self.error_message = ::std::option::Option::None;
    }

    pub fn has_error_message(&self) -> bool {
        self.error_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_message(&mut self, v: ::std::string::String) {
        self.error_message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_message(&mut self) -> &mut ::std::string::String {
        if self.error_message.is_none() {
            self.error_message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.error_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_message(&mut self) -> ::std::string::String {
        self.error_message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes data = 3;

    pub fn data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "error_code",
            |m: &HostResult| { &m.error_code },
            |m: &mut HostResult| { &mut m.error_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "error_message",
            |m: &HostResult| { &m.error_message },
            |m: &mut HostResult| { &mut m.error_message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &HostResult| { &m.data },
            |m: &mut HostResult| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HostResult>(
            "HostResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HostResult {
    const NAME: &'static str = "HostResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.error_code = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.error_message = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.data = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.error_code {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.error_message.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.error_code {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.error_message.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.data.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HostResult {
        HostResult::new()
    }

    fn clear(&mut self) {
        self.error_code = ::std::option::Option::None;
        self.error_message = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HostResult {
        static instance: HostResult = HostResult {
            error_code: ::std::option::Option::None,
            error_message: ::std::option::Option::None,
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HostResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HostResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HostResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HostResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:RunTargetActionReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RunTargetActionReq {
    // message fields
    // @@protoc_insertion_point(field:RunTargetActionReq.servo_id_vec)
    pub servo_id_vec: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RunTargetActionReq.target_rad_vec)
    pub target_rad_vec: ::std::vec::Vec<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:RunTargetActionReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RunTargetActionReq {
    fn default() -> &'a RunTargetActionReq {
        <RunTargetActionReq as ::protobuf::Message>::default_instance()
    }
}

impl RunTargetActionReq {
    pub fn new() -> RunTargetActionReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "servo_id_vec",
            |m: &RunTargetActionReq| { &m.servo_id_vec },
            |m: &mut RunTargetActionReq| { &mut m.servo_id_vec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "target_rad_vec",
            |m: &RunTargetActionReq| { &m.target_rad_vec },
            |m: &mut RunTargetActionReq| { &mut m.target_rad_vec },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RunTargetActionReq>(
            "RunTargetActionReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RunTargetActionReq {
    const NAME: &'static str = "RunTargetActionReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.servo_id_vec)?;
                },
                8 => {
                    self.servo_id_vec.push(is.read_uint32()?);
                },
                18 => {
                    is.read_repeated_packed_float_into(&mut self.target_rad_vec)?;
                },
                21 => {
                    self.target_rad_vec.push(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.servo_id_vec {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        my_size += 5 * self.target_rad_vec.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.servo_id_vec {
            os.write_uint32(1, *v)?;
        };
        for v in &self.target_rad_vec {
            os.write_float(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RunTargetActionReq {
        RunTargetActionReq::new()
    }

    fn clear(&mut self) {
        self.servo_id_vec.clear();
        self.target_rad_vec.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RunTargetActionReq {
        static instance: RunTargetActionReq = RunTargetActionReq {
            servo_id_vec: ::std::vec::Vec::new(),
            target_rad_vec: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RunTargetActionReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RunTargetActionReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RunTargetActionReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunTargetActionReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:RunTargetActionResp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RunTargetActionResp {
    // message fields
    // @@protoc_insertion_point(field:RunTargetActionResp.servo_id_vec)
    pub servo_id_vec: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:RunTargetActionResp.target_rad_vec)
    pub target_rad_vec: ::std::vec::Vec<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:RunTargetActionResp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RunTargetActionResp {
    fn default() -> &'a RunTargetActionResp {
        <RunTargetActionResp as ::protobuf::Message>::default_instance()
    }
}

impl RunTargetActionResp {
    pub fn new() -> RunTargetActionResp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "servo_id_vec",
            |m: &RunTargetActionResp| { &m.servo_id_vec },
            |m: &mut RunTargetActionResp| { &mut m.servo_id_vec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "target_rad_vec",
            |m: &RunTargetActionResp| { &m.target_rad_vec },
            |m: &mut RunTargetActionResp| { &mut m.target_rad_vec },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RunTargetActionResp>(
            "RunTargetActionResp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RunTargetActionResp {
    const NAME: &'static str = "RunTargetActionResp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.servo_id_vec)?;
                },
                8 => {
                    self.servo_id_vec.push(is.read_uint32()?);
                },
                18 => {
                    is.read_repeated_packed_float_into(&mut self.target_rad_vec)?;
                },
                21 => {
                    self.target_rad_vec.push(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.servo_id_vec {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        my_size += 5 * self.target_rad_vec.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.servo_id_vec {
            os.write_uint32(1, *v)?;
        };
        for v in &self.target_rad_vec {
            os.write_float(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RunTargetActionResp {
        RunTargetActionResp::new()
    }

    fn clear(&mut self) {
        self.servo_id_vec.clear();
        self.target_rad_vec.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RunTargetActionResp {
        static instance: RunTargetActionResp = RunTargetActionResp {
            servo_id_vec: ::std::vec::Vec::new(),
            target_rad_vec: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RunTargetActionResp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RunTargetActionResp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RunTargetActionResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunTargetActionResp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ActuatorInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ActuatorInfo {
    // message fields
    // @@protoc_insertion_point(field:ActuatorInfo.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ActuatorInfo.id)
    pub id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:ActuatorInfo.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<ActuatorType>>,
    // @@protoc_insertion_point(field:ActuatorInfo.vendor)
    pub vendor: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ActuatorInfo.model)
    pub model: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ActuatorInfo.ctrl)
    pub ctrl: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:ActuatorInfo.ctrl_min)
    pub ctrl_min: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:ActuatorInfo.ctrl_max)
    pub ctrl_max: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:ActuatorInfo.force_min)
    pub force_min: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:ActuatorInfo.force_max)
    pub force_max: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:ActuatorInfo.joint_id)
    pub joint_id: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:ActuatorInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ActuatorInfo {
    fn default() -> &'a ActuatorInfo {
        <ActuatorInfo as ::protobuf::Message>::default_instance()
    }
}

impl ActuatorInfo {
    pub fn new() -> ActuatorInfo {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 id = 2;

    pub fn id(&self) -> i32 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional .ActuatorType type = 3;

    pub fn type_(&self) -> ActuatorType {
        match self.type_ {
            Some(e) => e.enum_value_or(ActuatorType::DUMMY),
            None => ActuatorType::DUMMY,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ActuatorType) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string vendor = 4;

    pub fn vendor(&self) -> &str {
        match self.vendor.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_vendor(&mut self) {
        self.vendor = ::std::option::Option::None;
    }

    pub fn has_vendor(&self) -> bool {
        self.vendor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vendor(&mut self, v: ::std::string::String) {
        self.vendor = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vendor(&mut self) -> &mut ::std::string::String {
        if self.vendor.is_none() {
            self.vendor = ::std::option::Option::Some(::std::string::String::new());
        }
        self.vendor.as_mut().unwrap()
    }

    // Take field
    pub fn take_vendor(&mut self) -> ::std::string::String {
        self.vendor.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string model = 5;

    pub fn model(&self) -> &str {
        match self.model.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_model(&mut self) {
        self.model = ::std::option::Option::None;
    }

    pub fn has_model(&self) -> bool {
        self.model.is_some()
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::std::string::String) {
        self.model = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model(&mut self) -> &mut ::std::string::String {
        if self.model.is_none() {
            self.model = ::std::option::Option::Some(::std::string::String::new());
        }
        self.model.as_mut().unwrap()
    }

    // Take field
    pub fn take_model(&mut self) -> ::std::string::String {
        self.model.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional float ctrl = 6;

    pub fn ctrl(&self) -> f32 {
        self.ctrl.unwrap_or(0.)
    }

    pub fn clear_ctrl(&mut self) {
        self.ctrl = ::std::option::Option::None;
    }

    pub fn has_ctrl(&self) -> bool {
        self.ctrl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ctrl(&mut self, v: f32) {
        self.ctrl = ::std::option::Option::Some(v);
    }

    // optional float ctrl_min = 7;

    pub fn ctrl_min(&self) -> f32 {
        self.ctrl_min.unwrap_or(0.)
    }

    pub fn clear_ctrl_min(&mut self) {
        self.ctrl_min = ::std::option::Option::None;
    }

    pub fn has_ctrl_min(&self) -> bool {
        self.ctrl_min.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ctrl_min(&mut self, v: f32) {
        self.ctrl_min = ::std::option::Option::Some(v);
    }

    // optional float ctrl_max = 8;

    pub fn ctrl_max(&self) -> f32 {
        self.ctrl_max.unwrap_or(0.)
    }

    pub fn clear_ctrl_max(&mut self) {
        self.ctrl_max = ::std::option::Option::None;
    }

    pub fn has_ctrl_max(&self) -> bool {
        self.ctrl_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ctrl_max(&mut self, v: f32) {
        self.ctrl_max = ::std::option::Option::Some(v);
    }

    // optional float force_min = 9;

    pub fn force_min(&self) -> f32 {
        self.force_min.unwrap_or(0.)
    }

    pub fn clear_force_min(&mut self) {
        self.force_min = ::std::option::Option::None;
    }

    pub fn has_force_min(&self) -> bool {
        self.force_min.is_some()
    }

    // Param is passed by value, moved
    pub fn set_force_min(&mut self, v: f32) {
        self.force_min = ::std::option::Option::Some(v);
    }

    // optional float force_max = 10;

    pub fn force_max(&self) -> f32 {
        self.force_max.unwrap_or(0.)
    }

    pub fn clear_force_max(&mut self) {
        self.force_max = ::std::option::Option::None;
    }

    pub fn has_force_max(&self) -> bool {
        self.force_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_force_max(&mut self, v: f32) {
        self.force_max = ::std::option::Option::Some(v);
    }

    // optional int32 joint_id = 11;

    pub fn joint_id(&self) -> i32 {
        self.joint_id.unwrap_or(0)
    }

    pub fn clear_joint_id(&mut self) {
        self.joint_id = ::std::option::Option::None;
    }

    pub fn has_joint_id(&self) -> bool {
        self.joint_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_joint_id(&mut self, v: i32) {
        self.joint_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &ActuatorInfo| { &m.name },
            |m: &mut ActuatorInfo| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "id",
            |m: &ActuatorInfo| { &m.id },
            |m: &mut ActuatorInfo| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &ActuatorInfo| { &m.type_ },
            |m: &mut ActuatorInfo| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "vendor",
            |m: &ActuatorInfo| { &m.vendor },
            |m: &mut ActuatorInfo| { &mut m.vendor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "model",
            |m: &ActuatorInfo| { &m.model },
            |m: &mut ActuatorInfo| { &mut m.model },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ctrl",
            |m: &ActuatorInfo| { &m.ctrl },
            |m: &mut ActuatorInfo| { &mut m.ctrl },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ctrl_min",
            |m: &ActuatorInfo| { &m.ctrl_min },
            |m: &mut ActuatorInfo| { &mut m.ctrl_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ctrl_max",
            |m: &ActuatorInfo| { &m.ctrl_max },
            |m: &mut ActuatorInfo| { &mut m.ctrl_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "force_min",
            |m: &ActuatorInfo| { &m.force_min },
            |m: &mut ActuatorInfo| { &mut m.force_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "force_max",
            |m: &ActuatorInfo| { &m.force_max },
            |m: &mut ActuatorInfo| { &mut m.force_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "joint_id",
            |m: &ActuatorInfo| { &m.joint_id },
            |m: &mut ActuatorInfo| { &mut m.joint_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ActuatorInfo>(
            "ActuatorInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ActuatorInfo {
    const NAME: &'static str = "ActuatorInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.id = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    self.vendor = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.model = ::std::option::Option::Some(is.read_string()?);
                },
                53 => {
                    self.ctrl = ::std::option::Option::Some(is.read_float()?);
                },
                61 => {
                    self.ctrl_min = ::std::option::Option::Some(is.read_float()?);
                },
                69 => {
                    self.ctrl_max = ::std::option::Option::Some(is.read_float()?);
                },
                77 => {
                    self.force_min = ::std::option::Option::Some(is.read_float()?);
                },
                85 => {
                    self.force_max = ::std::option::Option::Some(is.read_float()?);
                },
                88 => {
                    self.joint_id = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.vendor.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.model.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.ctrl {
            my_size += 1 + 4;
        }
        if let Some(v) = self.ctrl_min {
            my_size += 1 + 4;
        }
        if let Some(v) = self.ctrl_max {
            my_size += 1 + 4;
        }
        if let Some(v) = self.force_min {
            my_size += 1 + 4;
        }
        if let Some(v) = self.force_max {
            my_size += 1 + 4;
        }
        if let Some(v) = self.joint_id {
            my_size += ::protobuf::rt::int32_size(11, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.id {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.type_ {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.vendor.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.model.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.ctrl {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.ctrl_min {
            os.write_float(7, v)?;
        }
        if let Some(v) = self.ctrl_max {
            os.write_float(8, v)?;
        }
        if let Some(v) = self.force_min {
            os.write_float(9, v)?;
        }
        if let Some(v) = self.force_max {
            os.write_float(10, v)?;
        }
        if let Some(v) = self.joint_id {
            os.write_int32(11, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ActuatorInfo {
        ActuatorInfo::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.id = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.vendor = ::std::option::Option::None;
        self.model = ::std::option::Option::None;
        self.ctrl = ::std::option::Option::None;
        self.ctrl_min = ::std::option::Option::None;
        self.ctrl_max = ::std::option::Option::None;
        self.force_min = ::std::option::Option::None;
        self.force_max = ::std::option::Option::None;
        self.joint_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ActuatorInfo {
        static instance: ActuatorInfo = ActuatorInfo {
            name: ::std::option::Option::None,
            id: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            vendor: ::std::option::Option::None,
            model: ::std::option::Option::None,
            ctrl: ::std::option::Option::None,
            ctrl_min: ::std::option::Option::None,
            ctrl_max: ::std::option::Option::None,
            force_min: ::std::option::Option::None,
            force_max: ::std::option::Option::None,
            joint_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ActuatorInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ActuatorInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ActuatorInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActuatorInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetActuatorInfoReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetActuatorInfoReq {
    // special fields
    // @@protoc_insertion_point(special_field:GetActuatorInfoReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetActuatorInfoReq {
    fn default() -> &'a GetActuatorInfoReq {
        <GetActuatorInfoReq as ::protobuf::Message>::default_instance()
    }
}

impl GetActuatorInfoReq {
    pub fn new() -> GetActuatorInfoReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetActuatorInfoReq>(
            "GetActuatorInfoReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetActuatorInfoReq {
    const NAME: &'static str = "GetActuatorInfoReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetActuatorInfoReq {
        GetActuatorInfoReq::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetActuatorInfoReq {
        static instance: GetActuatorInfoReq = GetActuatorInfoReq {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetActuatorInfoReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetActuatorInfoReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetActuatorInfoReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetActuatorInfoReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetActuatorInfoResp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetActuatorInfoResp {
    // message fields
    // @@protoc_insertion_point(field:GetActuatorInfoResp.actuators)
    pub actuators: ::std::vec::Vec<ActuatorInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:GetActuatorInfoResp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetActuatorInfoResp {
    fn default() -> &'a GetActuatorInfoResp {
        <GetActuatorInfoResp as ::protobuf::Message>::default_instance()
    }
}

impl GetActuatorInfoResp {
    pub fn new() -> GetActuatorInfoResp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "actuators",
            |m: &GetActuatorInfoResp| { &m.actuators },
            |m: &mut GetActuatorInfoResp| { &mut m.actuators },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetActuatorInfoResp>(
            "GetActuatorInfoResp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetActuatorInfoResp {
    const NAME: &'static str = "GetActuatorInfoResp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.actuators.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.actuators {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.actuators {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetActuatorInfoResp {
        GetActuatorInfoResp::new()
    }

    fn clear(&mut self) {
        self.actuators.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetActuatorInfoResp {
        static instance: GetActuatorInfoResp = GetActuatorInfoResp {
            actuators: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetActuatorInfoResp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetActuatorInfoResp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetActuatorInfoResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetActuatorInfoResp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:JointInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JointInfo {
    // message fields
    // @@protoc_insertion_point(field:JointInfo.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:JointInfo.id)
    pub id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:JointInfo.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<JointType>>,
    // @@protoc_insertion_point(field:JointInfo.dof_dim)
    pub dof_dim: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:JointInfo.joint_pos)
    pub joint_pos: ::std::vec::Vec<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:JointInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JointInfo {
    fn default() -> &'a JointInfo {
        <JointInfo as ::protobuf::Message>::default_instance()
    }
}

impl JointInfo {
    pub fn new() -> JointInfo {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 id = 2;

    pub fn id(&self) -> i32 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional .JointType type = 3;

    pub fn type_(&self) -> JointType {
        match self.type_ {
            Some(e) => e.enum_value_or(JointType::HINGE),
            None => JointType::HINGE,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: JointType) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional int32 dof_dim = 4;

    pub fn dof_dim(&self) -> i32 {
        self.dof_dim.unwrap_or(0)
    }

    pub fn clear_dof_dim(&mut self) {
        self.dof_dim = ::std::option::Option::None;
    }

    pub fn has_dof_dim(&self) -> bool {
        self.dof_dim.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dof_dim(&mut self, v: i32) {
        self.dof_dim = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &JointInfo| { &m.name },
            |m: &mut JointInfo| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "id",
            |m: &JointInfo| { &m.id },
            |m: &mut JointInfo| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &JointInfo| { &m.type_ },
            |m: &mut JointInfo| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "dof_dim",
            |m: &JointInfo| { &m.dof_dim },
            |m: &mut JointInfo| { &mut m.dof_dim },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "joint_pos",
            |m: &JointInfo| { &m.joint_pos },
            |m: &mut JointInfo| { &mut m.joint_pos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JointInfo>(
            "JointInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JointInfo {
    const NAME: &'static str = "JointInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.id = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                32 => {
                    self.dof_dim = ::std::option::Option::Some(is.read_int32()?);
                },
                42 => {
                    is.read_repeated_packed_float_into(&mut self.joint_pos)?;
                },
                45 => {
                    self.joint_pos.push(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.dof_dim {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        my_size += 5 * self.joint_pos.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.id {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.type_ {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.dof_dim {
            os.write_int32(4, v)?;
        }
        for v in &self.joint_pos {
            os.write_float(5, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JointInfo {
        JointInfo::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.id = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.dof_dim = ::std::option::Option::None;
        self.joint_pos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JointInfo {
        static instance: JointInfo = JointInfo {
            name: ::std::option::Option::None,
            id: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            dof_dim: ::std::option::Option::None,
            joint_pos: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JointInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JointInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JointInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JointInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetJointInfoReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetJointInfoReq {
    // special fields
    // @@protoc_insertion_point(special_field:GetJointInfoReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetJointInfoReq {
    fn default() -> &'a GetJointInfoReq {
        <GetJointInfoReq as ::protobuf::Message>::default_instance()
    }
}

impl GetJointInfoReq {
    pub fn new() -> GetJointInfoReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetJointInfoReq>(
            "GetJointInfoReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetJointInfoReq {
    const NAME: &'static str = "GetJointInfoReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetJointInfoReq {
        GetJointInfoReq::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetJointInfoReq {
        static instance: GetJointInfoReq = GetJointInfoReq {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetJointInfoReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetJointInfoReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetJointInfoReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetJointInfoReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetJointInfoResp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetJointInfoResp {
    // message fields
    // @@protoc_insertion_point(field:GetJointInfoResp.joints)
    pub joints: ::std::vec::Vec<JointInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:GetJointInfoResp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetJointInfoResp {
    fn default() -> &'a GetJointInfoResp {
        <GetJointInfoResp as ::protobuf::Message>::default_instance()
    }
}

impl GetJointInfoResp {
    pub fn new() -> GetJointInfoResp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "joints",
            |m: &GetJointInfoResp| { &m.joints },
            |m: &mut GetJointInfoResp| { &mut m.joints },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetJointInfoResp>(
            "GetJointInfoResp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetJointInfoResp {
    const NAME: &'static str = "GetJointInfoResp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.joints.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.joints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.joints {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetJointInfoResp {
        GetJointInfoResp::new()
    }

    fn clear(&mut self) {
        self.joints.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetJointInfoResp {
        static instance: GetJointInfoResp = GetJointInfoResp {
            joints: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetJointInfoResp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetJointInfoResp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetJointInfoResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetJointInfoResp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ConsoleWriteReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ConsoleWriteReq {
    // message fields
    // @@protoc_insertion_point(field:ConsoleWriteReq.message)
    pub message: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:ConsoleWriteReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsoleWriteReq {
    fn default() -> &'a ConsoleWriteReq {
        <ConsoleWriteReq as ::protobuf::Message>::default_instance()
    }
}

impl ConsoleWriteReq {
    pub fn new() -> ConsoleWriteReq {
        ::std::default::Default::default()
    }

    // optional string message = 1;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &ConsoleWriteReq| { &m.message },
            |m: &mut ConsoleWriteReq| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsoleWriteReq>(
            "ConsoleWriteReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConsoleWriteReq {
    const NAME: &'static str = "ConsoleWriteReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.message.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConsoleWriteReq {
        ConsoleWriteReq::new()
    }

    fn clear(&mut self) {
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsoleWriteReq {
        static instance: ConsoleWriteReq = ConsoleWriteReq {
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConsoleWriteReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsoleWriteReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsoleWriteReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsoleWriteReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:EmptyDummy)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EmptyDummy {
    // special fields
    // @@protoc_insertion_point(special_field:EmptyDummy.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EmptyDummy {
    fn default() -> &'a EmptyDummy {
        <EmptyDummy as ::protobuf::Message>::default_instance()
    }
}

impl EmptyDummy {
    pub fn new() -> EmptyDummy {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EmptyDummy>(
            "EmptyDummy",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EmptyDummy {
    const NAME: &'static str = "EmptyDummy";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EmptyDummy {
        EmptyDummy::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EmptyDummy {
        static instance: EmptyDummy = EmptyDummy {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EmptyDummy {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EmptyDummy").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EmptyDummy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmptyDummy {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ActuatorType)
pub enum ActuatorType {
    // @@protoc_insertion_point(enum_value:ActuatorType.DUMMY)
    DUMMY = 0,
    // @@protoc_insertion_point(enum_value:ActuatorType.MOTOR)
    MOTOR = 1,
    // @@protoc_insertion_point(enum_value:ActuatorType.POSITION)
    POSITION = 2,
}

impl ::protobuf::Enum for ActuatorType {
    const NAME: &'static str = "ActuatorType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ActuatorType> {
        match value {
            0 => ::std::option::Option::Some(ActuatorType::DUMMY),
            1 => ::std::option::Option::Some(ActuatorType::MOTOR),
            2 => ::std::option::Option::Some(ActuatorType::POSITION),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ActuatorType> {
        match str {
            "DUMMY" => ::std::option::Option::Some(ActuatorType::DUMMY),
            "MOTOR" => ::std::option::Option::Some(ActuatorType::MOTOR),
            "POSITION" => ::std::option::Option::Some(ActuatorType::POSITION),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ActuatorType] = &[
        ActuatorType::DUMMY,
        ActuatorType::MOTOR,
        ActuatorType::POSITION,
    ];
}

impl ::protobuf::EnumFull for ActuatorType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ActuatorType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ActuatorType {
    fn default() -> Self {
        ActuatorType::DUMMY
    }
}

impl ActuatorType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ActuatorType>("ActuatorType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:JointType)
pub enum JointType {
    // @@protoc_insertion_point(enum_value:JointType.HINGE)
    HINGE = 0,
    // @@protoc_insertion_point(enum_value:JointType.SLIDE)
    SLIDE = 1,
    // @@protoc_insertion_point(enum_value:JointType.BALL)
    BALL = 2,
    // @@protoc_insertion_point(enum_value:JointType.FREE)
    FREE = 3,
}

impl ::protobuf::Enum for JointType {
    const NAME: &'static str = "JointType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<JointType> {
        match value {
            0 => ::std::option::Option::Some(JointType::HINGE),
            1 => ::std::option::Option::Some(JointType::SLIDE),
            2 => ::std::option::Option::Some(JointType::BALL),
            3 => ::std::option::Option::Some(JointType::FREE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<JointType> {
        match str {
            "HINGE" => ::std::option::Option::Some(JointType::HINGE),
            "SLIDE" => ::std::option::Option::Some(JointType::SLIDE),
            "BALL" => ::std::option::Option::Some(JointType::BALL),
            "FREE" => ::std::option::Option::Some(JointType::FREE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [JointType] = &[
        JointType::HINGE,
        JointType::SLIDE,
        JointType::BALL,
        JointType::FREE,
    ];
}

impl ::protobuf::EnumFull for JointType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("JointType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for JointType {
    fn default() -> Self {
        JointType::HINGE
    }
}

impl JointType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<JointType>("JointType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16src/host/host_pb.proto\"d\n\nHostResult\x12\x1d\n\nerror_code\x18\
    \x01\x20\x01(\x05R\terrorCode\x12#\n\rerror_message\x18\x02\x20\x01(\tR\
    \x0cerrorMessage\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04data\"\\\n\
    \x12RunTargetActionReq\x12\x20\n\x0cservo_id_vec\x18\x01\x20\x03(\rR\nse\
    rvoIdVec\x12$\n\x0etarget_rad_vec\x18\x02\x20\x03(\x02R\x0ctargetRadVec\
    \"]\n\x13RunTargetActionResp\x12\x20\n\x0cservo_id_vec\x18\x01\x20\x03(\
    \rR\nservoIdVec\x12$\n\x0etarget_rad_vec\x18\x02\x20\x03(\x02R\x0ctarget\
    RadVec\"\xa2\x02\n\x0cActuatorInfo\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12\x0e\n\x02id\x18\x02\x20\x01(\x05R\x02id\x12!\n\x04type\x18\
    \x03\x20\x01(\x0e2\r.ActuatorTypeR\x04type\x12\x16\n\x06vendor\x18\x04\
    \x20\x01(\tR\x06vendor\x12\x14\n\x05model\x18\x05\x20\x01(\tR\x05model\
    \x12\x12\n\x04ctrl\x18\x06\x20\x01(\x02R\x04ctrl\x12\x19\n\x08ctrl_min\
    \x18\x07\x20\x01(\x02R\x07ctrlMin\x12\x19\n\x08ctrl_max\x18\x08\x20\x01(\
    \x02R\x07ctrlMax\x12\x1b\n\tforce_min\x18\t\x20\x01(\x02R\x08forceMin\
    \x12\x1b\n\tforce_max\x18\n\x20\x01(\x02R\x08forceMax\x12\x19\n\x08joint\
    _id\x18\x0b\x20\x01(\x05R\x07jointId\"\x14\n\x12GetActuatorInfoReq\"B\n\
    \x13GetActuatorInfoResp\x12+\n\tactuators\x18\x01\x20\x03(\x0b2\r.Actuat\
    orInfoR\tactuators\"\x85\x01\n\tJointInfo\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x12\x0e\n\x02id\x18\x02\x20\x01(\x05R\x02id\x12\x1e\n\
    \x04type\x18\x03\x20\x01(\x0e2\n.JointTypeR\x04type\x12\x17\n\x07dof_dim\
    \x18\x04\x20\x01(\x05R\x06dofDim\x12\x1b\n\tjoint_pos\x18\x05\x20\x03(\
    \x02R\x08jointPos\"\x11\n\x0fGetJointInfoReq\"6\n\x10GetJointInfoResp\
    \x12\"\n\x06joints\x18\x01\x20\x03(\x0b2\n.JointInfoR\x06joints\"+\n\x0f\
    ConsoleWriteReq\x12\x18\n\x07message\x18\x01\x20\x01(\tR\x07message\"\
    \x0c\n\nEmptyDummy*2\n\x0cActuatorType\x12\t\n\x05DUMMY\x10\0\x12\t\n\
    \x05MOTOR\x10\x01\x12\x0c\n\x08POSITION\x10\x02*5\n\tJointType\x12\t\n\
    \x05HINGE\x10\0\x12\t\n\x05SLIDE\x10\x01\x12\x08\n\x04BALL\x10\x02\x12\
    \x08\n\x04FREE\x10\x03J\xd0\x14\n\x06\x12\x04\0\0L\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\nD\n\x02\x04\0\x12\x04\x03\0\x07\x01\x1a8\x20Unified\
    \x20result\x20wrapper\x20for\x20all\x20host\x20function\x20responses\n\n\
    \n\n\x03\x04\0\x01\x12\x03\x03\x08\x12\n,\n\x04\x04\0\x02\0\x12\x03\x04\
    \x04\"\"\x1f\x200\x20=\x20success,\x20non-zero\x20=\x20error\n\n\x0c\n\
    \x05\x04\0\x02\0\x04\x12\x03\x04\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x04\r\x12\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x04\x13\x1d\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x04\x20!\n/\n\x04\x04\0\x02\x01\x12\x03\x05\
    \x04&\"\"\x20Human-readable\x20error\x20description\n\n\x0c\n\x05\x04\0\
    \x02\x01\x04\x12\x03\x05\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x05\r\x13\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x05\x14!\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x05$%\n?\n\x04\x04\0\x02\x02\x12\x03\x06\x04\
    \x1c\"2\x20Serialized\x20response\x20data\x20(specific\x20message\x20typ\
    e)\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x06\x04\x0c\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03\x06\r\x12\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x06\
    \x13\x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x06\x1a\x1b\n\n\n\x02\x04\
    \x01\x12\x04\t\0\x0c\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x1a\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\n\x04%\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\
    \n\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\n\r\x13\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\n\x14\x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\n\
    #$\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0b\x04&\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03\x0b\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\
    \r\x12\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0b\x13!\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x0b$%\n\n\n\x02\x04\x02\x12\x04\x0e\0\x11\x01\n\
    \n\n\x03\x04\x02\x01\x12\x03\x0e\x08\x1b\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03\x0f\x04%\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x0f\x04\x0c\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03\x0f\r\x13\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x0f\x14\x20\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0f#$\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x03\x10\x04&\n\x0c\n\x05\x04\x02\x02\x01\x04\
    \x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x10\r\x12\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x10\x13!\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x10$%\n\n\n\x02\x05\0\x12\x04\x13\0\x17\x01\n\n\n\x03\
    \x05\0\x01\x12\x03\x13\x05\x11\n\x0b\n\x04\x05\0\x02\0\x12\x03\x14\x04\
    \x0e\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x14\x04\t\n\x0c\n\x05\x05\0\x02\
    \0\x02\x12\x03\x14\x0c\r\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x15\x04\x0e\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x15\x04\t\n\x0c\n\x05\x05\0\x02\x01\
    \x02\x12\x03\x15\x0c\r\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x16\x04\x11\n\
    \x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x16\x04\x0c\n\x0c\n\x05\x05\0\x02\
    \x02\x02\x12\x03\x16\x0f\x10\n\n\n\x02\x04\x03\x12\x04\x19\0%\x01\n\n\n\
    \x03\x04\x03\x01\x12\x03\x19\x08\x14\n\x0b\n\x04\x04\x03\x02\0\x12\x03\
    \x1a\x04\x1d\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x1a\x04\x0c\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03\x1a\r\x13\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\x1a\x14\x18\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1a\x1b\x1c\n\
    \x0b\n\x04\x04\x03\x02\x01\x12\x03\x1b\x04\x1a\n\x0c\n\x05\x04\x03\x02\
    \x01\x04\x12\x03\x1b\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x1b\
    \r\x12\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1b\x13\x15\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03\x1b\x18\x19\n\x0b\n\x04\x04\x03\x02\x02\x12\
    \x03\x1c\x04#\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03\x1c\x04\x0c\n\x0c\
    \n\x05\x04\x03\x02\x02\x06\x12\x03\x1c\r\x19\n\x0c\n\x05\x04\x03\x02\x02\
    \x01\x12\x03\x1c\x1a\x1e\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x1c!\"\
    \n\x0b\n\x04\x04\x03\x02\x03\x12\x03\x1d\x04\x1f\n\x0c\n\x05\x04\x03\x02\
    \x03\x04\x12\x03\x1d\x04\x0c\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03\x1d\
    \r\x13\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03\x1d\x14\x1a\n\x0c\n\x05\
    \x04\x03\x02\x03\x03\x12\x03\x1d\x1d\x1e\n\x0b\n\x04\x04\x03\x02\x04\x12\
    \x03\x1e\x04\x1e\n\x0c\n\x05\x04\x03\x02\x04\x04\x12\x03\x1e\x04\x0c\n\
    \x0c\n\x05\x04\x03\x02\x04\x05\x12\x03\x1e\r\x13\n\x0c\n\x05\x04\x03\x02\
    \x04\x01\x12\x03\x1e\x14\x19\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03\x1e\
    \x1c\x1d\n\x0b\n\x04\x04\x03\x02\x05\x12\x03\x1f\x04\x1c\n\x0c\n\x05\x04\
    \x03\x02\x05\x04\x12\x03\x1f\x04\x0c\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\
    \x03\x1f\r\x12\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03\x1f\x13\x17\n\x0c\
    \n\x05\x04\x03\x02\x05\x03\x12\x03\x1f\x1a\x1b\n\x0b\n\x04\x04\x03\x02\
    \x06\x12\x03\x20\x04\x20\n\x0c\n\x05\x04\x03\x02\x06\x04\x12\x03\x20\x04\
    \x0c\n\x0c\n\x05\x04\x03\x02\x06\x05\x12\x03\x20\r\x12\n\x0c\n\x05\x04\
    \x03\x02\x06\x01\x12\x03\x20\x13\x1b\n\x0c\n\x05\x04\x03\x02\x06\x03\x12\
    \x03\x20\x1e\x1f\n\x0b\n\x04\x04\x03\x02\x07\x12\x03!\x04\x20\n\x0c\n\
    \x05\x04\x03\x02\x07\x04\x12\x03!\x04\x0c\n\x0c\n\x05\x04\x03\x02\x07\
    \x05\x12\x03!\r\x12\n\x0c\n\x05\x04\x03\x02\x07\x01\x12\x03!\x13\x1b\n\
    \x0c\n\x05\x04\x03\x02\x07\x03\x12\x03!\x1e\x1f\n\x0b\n\x04\x04\x03\x02\
    \x08\x12\x03\"\x04!\n\x0c\n\x05\x04\x03\x02\x08\x04\x12\x03\"\x04\x0c\n\
    \x0c\n\x05\x04\x03\x02\x08\x05\x12\x03\"\r\x12\n\x0c\n\x05\x04\x03\x02\
    \x08\x01\x12\x03\"\x13\x1c\n\x0c\n\x05\x04\x03\x02\x08\x03\x12\x03\"\x1f\
    \x20\n\x0b\n\x04\x04\x03\x02\t\x12\x03#\x04\"\n\x0c\n\x05\x04\x03\x02\t\
    \x04\x12\x03#\x04\x0c\n\x0c\n\x05\x04\x03\x02\t\x05\x12\x03#\r\x12\n\x0c\
    \n\x05\x04\x03\x02\t\x01\x12\x03#\x13\x1c\n\x0c\n\x05\x04\x03\x02\t\x03\
    \x12\x03#\x1f!\n\x0b\n\x04\x04\x03\x02\n\x12\x03$\x04!\n\x0c\n\x05\x04\
    \x03\x02\n\x04\x12\x03$\x04\x0c\n\x0c\n\x05\x04\x03\x02\n\x05\x12\x03$\r\
    \x12\n\x0c\n\x05\x04\x03\x02\n\x01\x12\x03$\x13\x1b\n\x0c\n\x05\x04\x03\
    \x02\n\x03\x12\x03$\x1e\x20\n#\n\x02\x04\x04\x12\x04'\0)\x01\"\x17\x20Th\
    is\x20request\x20is\x20empty\n\n\n\n\x03\x04\x04\x01\x12\x03'\x08\x1a\n\
    \n\n\x02\x04\x05\x12\x04+\0-\x01\n\n\n\x03\x04\x05\x01\x12\x03+\x08\x1b\
    \n\x0b\n\x04\x04\x05\x02\0\x12\x03,\x04(\n\x0c\n\x05\x04\x05\x02\0\x04\
    \x12\x03,\x04\x0c\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03,\r\x19\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x03,\x1a#\n\x0c\n\x05\x04\x05\x02\0\x03\x12\
    \x03,&'\n\n\n\x02\x05\x01\x12\x04/\04\x01\n\n\n\x03\x05\x01\x01\x12\x03/\
    \x05\x0e\n\x0b\n\x04\x05\x01\x02\0\x12\x030\x04\x0e\n\x0c\n\x05\x05\x01\
    \x02\0\x01\x12\x030\x04\t\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x030\x0c\r\n\
    \x0b\n\x04\x05\x01\x02\x01\x12\x031\x04\x0e\n\x0c\n\x05\x05\x01\x02\x01\
    \x01\x12\x031\x04\t\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x031\x0c\r\n\x0b\
    \n\x04\x05\x01\x02\x02\x12\x032\x04\r\n\x0c\n\x05\x05\x01\x02\x02\x01\
    \x12\x032\x04\x08\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x032\x0b\x0c\n\x0b\
    \n\x04\x05\x01\x02\x03\x12\x033\x04\r\n\x0c\n\x05\x05\x01\x02\x03\x01\
    \x12\x033\x04\x08\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x033\x0b\x0c\n\n\n\
    \x02\x04\x06\x12\x046\0<\x01\n\n\n\x03\x04\x06\x01\x12\x036\x08\x11\n\
    \x0b\n\x04\x04\x06\x02\0\x12\x037\x04\x1d\n\x0c\n\x05\x04\x06\x02\0\x04\
    \x12\x037\x04\x0c\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x037\r\x13\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x037\x14\x18\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x037\x1b\x1c\n\x0b\n\x04\x04\x06\x02\x01\x12\x038\x04\x1a\n\x0c\n\
    \x05\x04\x06\x02\x01\x04\x12\x038\x04\x0c\n\x0c\n\x05\x04\x06\x02\x01\
    \x05\x12\x038\r\x12\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x038\x13\x15\n\
    \x0c\n\x05\x04\x06\x02\x01\x03\x12\x038\x18\x19\n\x0b\n\x04\x04\x06\x02\
    \x02\x12\x039\x04\x20\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\x039\x04\x0c\n\
    \x0c\n\x05\x04\x06\x02\x02\x06\x12\x039\r\x16\n\x0c\n\x05\x04\x06\x02\
    \x02\x01\x12\x039\x17\x1b\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x039\x1e\
    \x1f\n\x0b\n\x04\x04\x06\x02\x03\x12\x03:\x04\x1f\n\x0c\n\x05\x04\x06\
    \x02\x03\x04\x12\x03:\x04\x0c\n\x0c\n\x05\x04\x06\x02\x03\x05\x12\x03:\r\
    \x12\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03:\x13\x1a\n\x0c\n\x05\x04\
    \x06\x02\x03\x03\x12\x03:\x1d\x1e\n\x0b\n\x04\x04\x06\x02\x04\x12\x03;\
    \x04!\n\x0c\n\x05\x04\x06\x02\x04\x04\x12\x03;\x04\x0c\n\x0c\n\x05\x04\
    \x06\x02\x04\x05\x12\x03;\r\x12\n\x0c\n\x05\x04\x06\x02\x04\x01\x12\x03;\
    \x13\x1c\n\x0c\n\x05\x04\x06\x02\x04\x03\x12\x03;\x1f\x20\n#\n\x02\x04\
    \x07\x12\x04>\0@\x01\"\x17\x20This\x20request\x20is\x20empty\n\n\n\n\x03\
    \x04\x07\x01\x12\x03>\x08\x17\n\n\n\x02\x04\x08\x12\x04B\0D\x01\n\n\n\
    \x03\x04\x08\x01\x12\x03B\x08\x18\n\x0b\n\x04\x04\x08\x02\0\x12\x03C\x04\
    \"\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03C\x04\x0c\n\x0c\n\x05\x04\x08\
    \x02\0\x06\x12\x03C\r\x16\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03C\x17\x1d\
    \n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03C\x20!\n\n\n\x02\x04\t\x12\x04F\0H\
    \x01\n\n\n\x03\x04\t\x01\x12\x03F\x08\x17\n\x0b\n\x04\x04\t\x02\0\x12\
    \x03G\x04\x20\n\x0c\n\x05\x04\t\x02\0\x04\x12\x03G\x04\x0c\n\x0c\n\x05\
    \x04\t\x02\0\x05\x12\x03G\r\x13\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03G\x14\
    \x1b\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03G\x1e\x1f\n\n\n\x02\x04\n\x12\
    \x04J\0L\x01\n\n\n\x03\x04\n\x01\x12\x03J\x08\x12\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(HostResult::generated_message_descriptor_data());
            messages.push(RunTargetActionReq::generated_message_descriptor_data());
            messages.push(RunTargetActionResp::generated_message_descriptor_data());
            messages.push(ActuatorInfo::generated_message_descriptor_data());
            messages.push(GetActuatorInfoReq::generated_message_descriptor_data());
            messages.push(GetActuatorInfoResp::generated_message_descriptor_data());
            messages.push(JointInfo::generated_message_descriptor_data());
            messages.push(GetJointInfoReq::generated_message_descriptor_data());
            messages.push(GetJointInfoResp::generated_message_descriptor_data());
            messages.push(ConsoleWriteReq::generated_message_descriptor_data());
            messages.push(EmptyDummy::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(ActuatorType::generated_enum_descriptor_data());
            enums.push(JointType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
